name: Deploy Homepage

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build Hugo Website
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v31
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 5G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          nix develop --command -- hugo \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: homepage
          path: |
            public/
            wrangler.toml

  preview:
    name: Deploy (Preview)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      deployments: write
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    if: github.event_name == 'pull_request'
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v5

      - name: Deploy to Cloudflare (Development)
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GH_TOKEN_FOR_DEPLOYMENTS }}
          command: versions upload

  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: preview
    permissions:
      pull-requests: write
    if: ${{ always() && github.event_name == 'pull_request' }}
    steps:
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v3
        with:
          comment-tag: deployment
          mode: upsert
          message: |
            ## Preview ${{ github.repository }} on Cloudflare

            | **Last commit** | ${{ github.event.pull_request.head.sha || github.event.workflow_run.head_sha || github.sha }} |
            | --------------- | - |
            | **Status**      | ${{ needs.preview.result == 'success' && '✅ Success' || '❌ Failed' }} |
            | **Preview URL** | ${{ needs.preview.result == 'success' && needs.preview.outputs.deployment-url || 'N/A' }} |

  deploy:
    name: Deploy (Production)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      deployments: write
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v5

      - name: Deploy to Cloudflare (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GH_TOKEN_FOR_DEPLOYMENTS }}
